import 'dart:io';
import 'package:path/path.dart' as p;

Future<void> main(List<String> args) async {
  if (args.isEmpty) {
    print('Usage: fvm dart gen_routes.dart <package_name>');
    return;
  }

  String packageName = args[0];
  final buffer = StringBuffer();
  buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
  buffer.writeln('// Generated by Mason');
  buffer.writeln();
  buffer.writeln('import \'package:go_router/go_router.dart\';');

  final routes = <String>[];

  final featureDir = Directory('lib/features');

  if (!featureDir.existsSync()) {
    throw Exception('Directory lib/features not found!');
  }

  for (final file in featureDir
      .listSync(recursive: true)
      .whereType<File>()
      .where((f) => f.path.endsWith('_route.g.dart'))) {
    final relativeImport = p
        .relative(file.path, from: 'lib')
        .replaceAll(".g", "");
    final importAlias = p
        .basenameWithoutExtension(file.path)
        .replaceAll(".g", "");

    buffer.writeln(
      'import \'package:$packageName/$relativeImport\' as $importAlias;',
    );
    routes.add('...$importAlias.\$appRoutes');
  }

  buffer.writeln();
  buffer.writeln('final List<RouteBase> allRoutes = [');
  for (final r in routes) {
    buffer.writeln('  $r,');
  }
  buffer.writeln('];');

  final outputFile = File('lib/core/routers/all_routes.dart');
  outputFile.createSync(recursive: true);
  outputFile.writeAsStringSync(buffer.toString());
}
